# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UMA_ACC', [dirname(__file__)])
        except ImportError:
            import _UMA_ACC
            return _UMA_ACC
        if fp is not None:
            try:
                _mod = imp.load_module('_UMA_ACC', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _UMA_ACC = swig_import_helper()
    del swig_import_helper
else:
    import _UMA_ACC
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _UMA_ACC.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _UMA_ACC.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _UMA_ACC.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _UMA_ACC.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _UMA_ACC.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _UMA_ACC.SwigPyIterator_equal(self, x)

    def copy(self):
        return _UMA_ACC.SwigPyIterator_copy(self)

    def next(self):
        return _UMA_ACC.SwigPyIterator_next(self)

    def __next__(self):
        return _UMA_ACC.SwigPyIterator___next__(self)

    def previous(self):
        return _UMA_ACC.SwigPyIterator_previous(self)

    def advance(self, n):
        return _UMA_ACC.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _UMA_ACC.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _UMA_ACC.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _UMA_ACC.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _UMA_ACC.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _UMA_ACC.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _UMA_ACC.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _UMA_ACC.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_ACC.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_ACC.IntVector___nonzero__(self)

    def __bool__(self):
        return _UMA_ACC.IntVector___bool__(self)

    def __len__(self):
        return _UMA_ACC.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA_ACC.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_ACC.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_ACC.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_ACC.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_ACC.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_ACC.IntVector___setitem__(self, *args)

    def pop(self):
        return _UMA_ACC.IntVector_pop(self)

    def append(self, x):
        return _UMA_ACC.IntVector_append(self, x)

    def empty(self):
        return _UMA_ACC.IntVector_empty(self)

    def size(self):
        return _UMA_ACC.IntVector_size(self)

    def swap(self, v):
        return _UMA_ACC.IntVector_swap(self, v)

    def begin(self):
        return _UMA_ACC.IntVector_begin(self)

    def end(self):
        return _UMA_ACC.IntVector_end(self)

    def rbegin(self):
        return _UMA_ACC.IntVector_rbegin(self)

    def rend(self):
        return _UMA_ACC.IntVector_rend(self)

    def clear(self):
        return _UMA_ACC.IntVector_clear(self)

    def get_allocator(self):
        return _UMA_ACC.IntVector_get_allocator(self)

    def pop_back(self):
        return _UMA_ACC.IntVector_pop_back(self)

    def erase(self, *args):
        return _UMA_ACC.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_ACC.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_ACC.IntVector_push_back(self, x)

    def front(self):
        return _UMA_ACC.IntVector_front(self)

    def back(self):
        return _UMA_ACC.IntVector_back(self)

    def assign(self, n, x):
        return _UMA_ACC.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA_ACC.IntVector_resize(self, *args)

    def insert(self, *args):
        return _UMA_ACC.IntVector_insert(self, *args)

    def reserve(self, n):
        return _UMA_ACC.IntVector_reserve(self, n)

    def capacity(self):
        return _UMA_ACC.IntVector_capacity(self)
    __swig_destroy__ = _UMA_ACC.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _UMA_ACC.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_ACC.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_ACC.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _UMA_ACC.DoubleVector___bool__(self)

    def __len__(self):
        return _UMA_ACC.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA_ACC.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_ACC.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_ACC.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_ACC.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_ACC.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_ACC.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _UMA_ACC.DoubleVector_pop(self)

    def append(self, x):
        return _UMA_ACC.DoubleVector_append(self, x)

    def empty(self):
        return _UMA_ACC.DoubleVector_empty(self)

    def size(self):
        return _UMA_ACC.DoubleVector_size(self)

    def swap(self, v):
        return _UMA_ACC.DoubleVector_swap(self, v)

    def begin(self):
        return _UMA_ACC.DoubleVector_begin(self)

    def end(self):
        return _UMA_ACC.DoubleVector_end(self)

    def rbegin(self):
        return _UMA_ACC.DoubleVector_rbegin(self)

    def rend(self):
        return _UMA_ACC.DoubleVector_rend(self)

    def clear(self):
        return _UMA_ACC.DoubleVector_clear(self)

    def get_allocator(self):
        return _UMA_ACC.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _UMA_ACC.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _UMA_ACC.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_ACC.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_ACC.DoubleVector_push_back(self, x)

    def front(self):
        return _UMA_ACC.DoubleVector_front(self)

    def back(self):
        return _UMA_ACC.DoubleVector_back(self)

    def assign(self, n, x):
        return _UMA_ACC.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA_ACC.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _UMA_ACC.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _UMA_ACC.DoubleVector_reserve(self, n)

    def capacity(self):
        return _UMA_ACC.DoubleVector_capacity(self)
    __swig_destroy__ = _UMA_ACC.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _UMA_ACC.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_ACC.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_ACC.StringVector___nonzero__(self)

    def __bool__(self):
        return _UMA_ACC.StringVector___bool__(self)

    def __len__(self):
        return _UMA_ACC.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA_ACC.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_ACC.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_ACC.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_ACC.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_ACC.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_ACC.StringVector___setitem__(self, *args)

    def pop(self):
        return _UMA_ACC.StringVector_pop(self)

    def append(self, x):
        return _UMA_ACC.StringVector_append(self, x)

    def empty(self):
        return _UMA_ACC.StringVector_empty(self)

    def size(self):
        return _UMA_ACC.StringVector_size(self)

    def swap(self, v):
        return _UMA_ACC.StringVector_swap(self, v)

    def begin(self):
        return _UMA_ACC.StringVector_begin(self)

    def end(self):
        return _UMA_ACC.StringVector_end(self)

    def rbegin(self):
        return _UMA_ACC.StringVector_rbegin(self)

    def rend(self):
        return _UMA_ACC.StringVector_rend(self)

    def clear(self):
        return _UMA_ACC.StringVector_clear(self)

    def get_allocator(self):
        return _UMA_ACC.StringVector_get_allocator(self)

    def pop_back(self):
        return _UMA_ACC.StringVector_pop_back(self)

    def erase(self, *args):
        return _UMA_ACC.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_ACC.new_StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_ACC.StringVector_push_back(self, x)

    def front(self):
        return _UMA_ACC.StringVector_front(self)

    def back(self):
        return _UMA_ACC.StringVector_back(self)

    def assign(self, n, x):
        return _UMA_ACC.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA_ACC.StringVector_resize(self, *args)

    def insert(self, *args):
        return _UMA_ACC.StringVector_insert(self, *args)

    def reserve(self, n):
        return _UMA_ACC.StringVector_reserve(self, n)

    def capacity(self):
        return _UMA_ACC.StringVector_capacity(self)
    __swig_destroy__ = _UMA_ACC.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _UMA_ACC.StringVector_swigregister
StringVector_swigregister(StringVector)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_ACC.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_ACC.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _UMA_ACC.ConstCharVector___bool__(self)

    def __len__(self):
        return _UMA_ACC.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA_ACC.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_ACC.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_ACC.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_ACC.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_ACC.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_ACC.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _UMA_ACC.ConstCharVector_pop(self)

    def append(self, x):
        return _UMA_ACC.ConstCharVector_append(self, x)

    def empty(self):
        return _UMA_ACC.ConstCharVector_empty(self)

    def size(self):
        return _UMA_ACC.ConstCharVector_size(self)

    def swap(self, v):
        return _UMA_ACC.ConstCharVector_swap(self, v)

    def begin(self):
        return _UMA_ACC.ConstCharVector_begin(self)

    def end(self):
        return _UMA_ACC.ConstCharVector_end(self)

    def rbegin(self):
        return _UMA_ACC.ConstCharVector_rbegin(self)

    def rend(self):
        return _UMA_ACC.ConstCharVector_rend(self)

    def clear(self):
        return _UMA_ACC.ConstCharVector_clear(self)

    def get_allocator(self):
        return _UMA_ACC.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _UMA_ACC.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _UMA_ACC.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_ACC.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_ACC.ConstCharVector_push_back(self, x)

    def front(self):
        return _UMA_ACC.ConstCharVector_front(self)

    def back(self):
        return _UMA_ACC.ConstCharVector_back(self)

    def assign(self, n, x):
        return _UMA_ACC.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA_ACC.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _UMA_ACC.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _UMA_ACC.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _UMA_ACC.ConstCharVector_capacity(self)
    __swig_destroy__ = _UMA_ACC.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _UMA_ACC.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_ACC.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_ACC.BoolVector___nonzero__(self)

    def __bool__(self):
        return _UMA_ACC.BoolVector___bool__(self)

    def __len__(self):
        return _UMA_ACC.BoolVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA_ACC.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_ACC.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_ACC.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_ACC.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_ACC.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_ACC.BoolVector___setitem__(self, *args)

    def pop(self):
        return _UMA_ACC.BoolVector_pop(self)

    def append(self, x):
        return _UMA_ACC.BoolVector_append(self, x)

    def empty(self):
        return _UMA_ACC.BoolVector_empty(self)

    def size(self):
        return _UMA_ACC.BoolVector_size(self)

    def swap(self, v):
        return _UMA_ACC.BoolVector_swap(self, v)

    def begin(self):
        return _UMA_ACC.BoolVector_begin(self)

    def end(self):
        return _UMA_ACC.BoolVector_end(self)

    def rbegin(self):
        return _UMA_ACC.BoolVector_rbegin(self)

    def rend(self):
        return _UMA_ACC.BoolVector_rend(self)

    def clear(self):
        return _UMA_ACC.BoolVector_clear(self)

    def get_allocator(self):
        return _UMA_ACC.BoolVector_get_allocator(self)

    def pop_back(self):
        return _UMA_ACC.BoolVector_pop_back(self)

    def erase(self, *args):
        return _UMA_ACC.BoolVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_ACC.new_BoolVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_ACC.BoolVector_push_back(self, x)

    def front(self):
        return _UMA_ACC.BoolVector_front(self)

    def back(self):
        return _UMA_ACC.BoolVector_back(self)

    def assign(self, n, x):
        return _UMA_ACC.BoolVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA_ACC.BoolVector_resize(self, *args)

    def insert(self, *args):
        return _UMA_ACC.BoolVector_insert(self, *args)

    def reserve(self, n):
        return _UMA_ACC.BoolVector_reserve(self, n)

    def capacity(self):
        return _UMA_ACC.BoolVector_capacity(self)
    __swig_destroy__ = _UMA_ACC.delete_BoolVector
    __del__ = lambda self: None
BoolVector_swigregister = _UMA_ACC.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class IntVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_ACC.IntVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_ACC.IntVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA_ACC.IntVector2D___bool__(self)

    def __len__(self):
        return _UMA_ACC.IntVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA_ACC.IntVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_ACC.IntVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_ACC.IntVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_ACC.IntVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_ACC.IntVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_ACC.IntVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA_ACC.IntVector2D_pop(self)

    def append(self, x):
        return _UMA_ACC.IntVector2D_append(self, x)

    def empty(self):
        return _UMA_ACC.IntVector2D_empty(self)

    def size(self):
        return _UMA_ACC.IntVector2D_size(self)

    def swap(self, v):
        return _UMA_ACC.IntVector2D_swap(self, v)

    def begin(self):
        return _UMA_ACC.IntVector2D_begin(self)

    def end(self):
        return _UMA_ACC.IntVector2D_end(self)

    def rbegin(self):
        return _UMA_ACC.IntVector2D_rbegin(self)

    def rend(self):
        return _UMA_ACC.IntVector2D_rend(self)

    def clear(self):
        return _UMA_ACC.IntVector2D_clear(self)

    def get_allocator(self):
        return _UMA_ACC.IntVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA_ACC.IntVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA_ACC.IntVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_ACC.new_IntVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_ACC.IntVector2D_push_back(self, x)

    def front(self):
        return _UMA_ACC.IntVector2D_front(self)

    def back(self):
        return _UMA_ACC.IntVector2D_back(self)

    def assign(self, n, x):
        return _UMA_ACC.IntVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA_ACC.IntVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA_ACC.IntVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA_ACC.IntVector2D_reserve(self, n)

    def capacity(self):
        return _UMA_ACC.IntVector2D_capacity(self)
    __swig_destroy__ = _UMA_ACC.delete_IntVector2D
    __del__ = lambda self: None
IntVector2D_swigregister = _UMA_ACC.IntVector2D_swigregister
IntVector2D_swigregister(IntVector2D)

class DoubleVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_ACC.DoubleVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_ACC.DoubleVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA_ACC.DoubleVector2D___bool__(self)

    def __len__(self):
        return _UMA_ACC.DoubleVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA_ACC.DoubleVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_ACC.DoubleVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_ACC.DoubleVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_ACC.DoubleVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_ACC.DoubleVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_ACC.DoubleVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA_ACC.DoubleVector2D_pop(self)

    def append(self, x):
        return _UMA_ACC.DoubleVector2D_append(self, x)

    def empty(self):
        return _UMA_ACC.DoubleVector2D_empty(self)

    def size(self):
        return _UMA_ACC.DoubleVector2D_size(self)

    def swap(self, v):
        return _UMA_ACC.DoubleVector2D_swap(self, v)

    def begin(self):
        return _UMA_ACC.DoubleVector2D_begin(self)

    def end(self):
        return _UMA_ACC.DoubleVector2D_end(self)

    def rbegin(self):
        return _UMA_ACC.DoubleVector2D_rbegin(self)

    def rend(self):
        return _UMA_ACC.DoubleVector2D_rend(self)

    def clear(self):
        return _UMA_ACC.DoubleVector2D_clear(self)

    def get_allocator(self):
        return _UMA_ACC.DoubleVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA_ACC.DoubleVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA_ACC.DoubleVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_ACC.new_DoubleVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_ACC.DoubleVector2D_push_back(self, x)

    def front(self):
        return _UMA_ACC.DoubleVector2D_front(self)

    def back(self):
        return _UMA_ACC.DoubleVector2D_back(self)

    def assign(self, n, x):
        return _UMA_ACC.DoubleVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA_ACC.DoubleVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA_ACC.DoubleVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA_ACC.DoubleVector2D_reserve(self, n)

    def capacity(self):
        return _UMA_ACC.DoubleVector2D_capacity(self)
    __swig_destroy__ = _UMA_ACC.delete_DoubleVector2D
    __del__ = lambda self: None
DoubleVector2D_swigregister = _UMA_ACC.DoubleVector2D_swigregister
DoubleVector2D_swigregister(DoubleVector2D)

class StringVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_ACC.StringVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_ACC.StringVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA_ACC.StringVector2D___bool__(self)

    def __len__(self):
        return _UMA_ACC.StringVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA_ACC.StringVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_ACC.StringVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_ACC.StringVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_ACC.StringVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_ACC.StringVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_ACC.StringVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA_ACC.StringVector2D_pop(self)

    def append(self, x):
        return _UMA_ACC.StringVector2D_append(self, x)

    def empty(self):
        return _UMA_ACC.StringVector2D_empty(self)

    def size(self):
        return _UMA_ACC.StringVector2D_size(self)

    def swap(self, v):
        return _UMA_ACC.StringVector2D_swap(self, v)

    def begin(self):
        return _UMA_ACC.StringVector2D_begin(self)

    def end(self):
        return _UMA_ACC.StringVector2D_end(self)

    def rbegin(self):
        return _UMA_ACC.StringVector2D_rbegin(self)

    def rend(self):
        return _UMA_ACC.StringVector2D_rend(self)

    def clear(self):
        return _UMA_ACC.StringVector2D_clear(self)

    def get_allocator(self):
        return _UMA_ACC.StringVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA_ACC.StringVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA_ACC.StringVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_ACC.new_StringVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_ACC.StringVector2D_push_back(self, x)

    def front(self):
        return _UMA_ACC.StringVector2D_front(self)

    def back(self):
        return _UMA_ACC.StringVector2D_back(self)

    def assign(self, n, x):
        return _UMA_ACC.StringVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA_ACC.StringVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA_ACC.StringVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA_ACC.StringVector2D_reserve(self, n)

    def capacity(self):
        return _UMA_ACC.StringVector2D_capacity(self)
    __swig_destroy__ = _UMA_ACC.delete_StringVector2D
    __del__ = lambda self: None
StringVector2D_swigregister = _UMA_ACC.StringVector2D_swigregister
StringVector2D_swigregister(StringVector2D)

class ConstCharVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_ACC.ConstCharVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_ACC.ConstCharVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA_ACC.ConstCharVector2D___bool__(self)

    def __len__(self):
        return _UMA_ACC.ConstCharVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA_ACC.ConstCharVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_ACC.ConstCharVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_ACC.ConstCharVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_ACC.ConstCharVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_ACC.ConstCharVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_ACC.ConstCharVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA_ACC.ConstCharVector2D_pop(self)

    def append(self, x):
        return _UMA_ACC.ConstCharVector2D_append(self, x)

    def empty(self):
        return _UMA_ACC.ConstCharVector2D_empty(self)

    def size(self):
        return _UMA_ACC.ConstCharVector2D_size(self)

    def swap(self, v):
        return _UMA_ACC.ConstCharVector2D_swap(self, v)

    def begin(self):
        return _UMA_ACC.ConstCharVector2D_begin(self)

    def end(self):
        return _UMA_ACC.ConstCharVector2D_end(self)

    def rbegin(self):
        return _UMA_ACC.ConstCharVector2D_rbegin(self)

    def rend(self):
        return _UMA_ACC.ConstCharVector2D_rend(self)

    def clear(self):
        return _UMA_ACC.ConstCharVector2D_clear(self)

    def get_allocator(self):
        return _UMA_ACC.ConstCharVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA_ACC.ConstCharVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA_ACC.ConstCharVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_ACC.new_ConstCharVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_ACC.ConstCharVector2D_push_back(self, x)

    def front(self):
        return _UMA_ACC.ConstCharVector2D_front(self)

    def back(self):
        return _UMA_ACC.ConstCharVector2D_back(self)

    def assign(self, n, x):
        return _UMA_ACC.ConstCharVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA_ACC.ConstCharVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA_ACC.ConstCharVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA_ACC.ConstCharVector2D_reserve(self, n)

    def capacity(self):
        return _UMA_ACC.ConstCharVector2D_capacity(self)
    __swig_destroy__ = _UMA_ACC.delete_ConstCharVector2D
    __del__ = lambda self: None
ConstCharVector2D_swigregister = _UMA_ACC.ConstCharVector2D_swigregister
ConstCharVector2D_swigregister(ConstCharVector2D)

class BoolVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_ACC.BoolVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_ACC.BoolVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA_ACC.BoolVector2D___bool__(self)

    def __len__(self):
        return _UMA_ACC.BoolVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA_ACC.BoolVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_ACC.BoolVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_ACC.BoolVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_ACC.BoolVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_ACC.BoolVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_ACC.BoolVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA_ACC.BoolVector2D_pop(self)

    def append(self, x):
        return _UMA_ACC.BoolVector2D_append(self, x)

    def empty(self):
        return _UMA_ACC.BoolVector2D_empty(self)

    def size(self):
        return _UMA_ACC.BoolVector2D_size(self)

    def swap(self, v):
        return _UMA_ACC.BoolVector2D_swap(self, v)

    def begin(self):
        return _UMA_ACC.BoolVector2D_begin(self)

    def end(self):
        return _UMA_ACC.BoolVector2D_end(self)

    def rbegin(self):
        return _UMA_ACC.BoolVector2D_rbegin(self)

    def rend(self):
        return _UMA_ACC.BoolVector2D_rend(self)

    def clear(self):
        return _UMA_ACC.BoolVector2D_clear(self)

    def get_allocator(self):
        return _UMA_ACC.BoolVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA_ACC.BoolVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA_ACC.BoolVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_ACC.new_BoolVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_ACC.BoolVector2D_push_back(self, x)

    def front(self):
        return _UMA_ACC.BoolVector2D_front(self)

    def back(self):
        return _UMA_ACC.BoolVector2D_back(self)

    def assign(self, n, x):
        return _UMA_ACC.BoolVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA_ACC.BoolVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA_ACC.BoolVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA_ACC.BoolVector2D_reserve(self, n)

    def capacity(self):
        return _UMA_ACC.BoolVector2D_capacity(self)
    __swig_destroy__ = _UMA_ACC.delete_BoolVector2D
    __del__ = lambda self: None
BoolVector2D_swigregister = _UMA_ACC.BoolVector2D_swigregister
BoolVector2D_swigregister(BoolVector2D)

class test(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, test, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, test, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _UMA_ACC.new_test()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def testFun(self, x):
        return _UMA_ACC.test_testFun(self, x)

    def printTest(self):
        return _UMA_ACC.test_printTest(self)

    def testVector(self):
        return _UMA_ACC.test_testVector(self)

    def getVector(self, v):
        return _UMA_ACC.test_getVector(self, v)

    def print_array(self, myarray):
        return _UMA_ACC.test_print_array(self, myarray)

    def testBool(self, b):
        return _UMA_ACC.test_testBool(self, b)
    __swig_destroy__ = _UMA_ACC.delete_test
    __del__ = lambda self: None
test_swigregister = _UMA_ACC.test_swigregister
test_swigregister(test)

class snapshot_platform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, snapshot_platform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, snapshot_platform, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _UMA_ACC.new_snapshot_platform()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def implies(self, row, col, weights, threshold):
        return _UMA_ACC.snapshot_platform_implies(self, row, col, weights, threshold)

    def equivalent(self, row, col, weights, threshold):
        return _UMA_ACC.snapshot_platform_equivalent(self, row, col, weights, threshold)

    def compi(self, x):
        return _UMA_ACC.snapshot_platform_compi(self, x)

    def update_weights_GPU(self, weights, observe, size):
        return _UMA_ACC.snapshot_platform_update_weights_GPU(self, weights, observe, size)

    def update_weights(self, weights, observe, size):
        return _UMA_ACC.snapshot_platform_update_weights(self, weights, observe, size)

    def orient_square(self, dir, weights, thresholds, x, y):
        return _UMA_ACC.snapshot_platform_orient_square(self, dir, weights, thresholds, x, y)

    def orient_all(self, dir, weights, thresholds, size):
        return _UMA_ACC.snapshot_platform_orient_all(self, dir, weights, thresholds, size)

    def orient_all_GPU(self, dir, weights, thresholds, size):
        return _UMA_ACC.snapshot_platform_orient_all_GPU(self, dir, weights, thresholds, size)

    def propagate_GPU(self, dir, signal, load, size):
        return _UMA_ACC.snapshot_platform_propagate_GPU(self, dir, signal, load, size)

    def update_state_GPU(self, dir, weights, thresholds, observe, size):
        return _UMA_ACC.snapshot_platform_update_state_GPU(self, dir, weights, thresholds, observe, size)

    def getDir(self):
        return _UMA_ACC.snapshot_platform_getDir(self)

    def getWeights(self):
        return _UMA_ACC.snapshot_platform_getWeights(self)

    def getCurrent(self):
        return _UMA_ACC.snapshot_platform_getCurrent(self)
    __swig_destroy__ = _UMA_ACC.delete_snapshot_platform
    __del__ = lambda self: None
snapshot_platform_swigregister = _UMA_ACC.snapshot_platform_swigregister
snapshot_platform_swigregister(snapshot_platform)

# This file is compatible with both classic and new-style classes.


